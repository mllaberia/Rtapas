% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trimHS_maxC.R
\name{trimHS_maxC}
\alias{trimHS_maxC}
\title{Trims the H-S association matrix maximizing the Congruence}
\usage{
trimHS_maxC(N, HS, n, check.unique = TRUE, session = "sequential", cl = 1)
}
\arguments{
\item{N}{Number of runs.}

\item{HS}{Host-Symbiont association matrix.}

\item{n}{Number of unique associations.}

\item{check.unique}{if \code{TRUE} discards duplicated trimmed matrices. This
alternative is recommended if \code{n} is small, because the
probability of obtaining the same trimmed matrix in different runs
increases as \code{n} decreases.}

\item{session}{Strategy you want to work with. Default is \code{"sequential"},
resolves \R expressions sequentially in the current \R
process. If \code{"multisession"} and \code{"multicore"} (not
supported on Windows) resolves \R expressions in parallel in separate
\R sessions running in the background.}

\item{cl}{Number of cluster the user wants to use. Check how many CPUs/cores
your computer has with \code{\link[future:availableCores]{future::availableCores()}}.
Note that \code{cl<=\link[=availableCores]{availableCores()}}.
Default is \code{cl = 1} for \code{"sequential"} strategy.}
}
\value{
A list of the N trimmed matrices.
}
\description{
For N runs, it randomly chooses \code{n} unique one-to-one associations and
trims the H-S association matrix to include only the n associations.
}
\examples{
#trimHS_maxC(N, HS, n, check.unique = TRUE)

}
