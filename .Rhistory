#libraries for create a package
library(devtools)
library(roxygen2)
library(tidyverse)
devtools::load_all()
devtools::document()
roxygen2::roxygenize()
devtools::check()
usethis::use_r("tangle_gram")
data(amph_trem)
N = 100
n = 8
ATc <- max_cong(am_matrix, amphipod, trematode, n, N, method = "paco",
symmetric = TRUE, ei.correct = "sqrt.D",
percentile = 0.01, res.fq = TRUE,
strat = "parallel", cl = 4)
View(ATc)
usethis::use_r("max_cong")
usethis::use_r("paco_ss")
ATc <- max_cong(am_matrix, amphipod, trematode, n, N, method = "paco",
symmetric = TRUE, ei.correct = "sqrt.D",
percentile = 0.01, res.fq = TRUE,
strat = "parallel", cl = 4)
View(ATc)
amphipod <- ape::read.nexus("C:/Users/Mar/Desktop/RTP_RPackage/RandomTaPas-master/PfxCP_Data/Pfluviatilis.tre")
trematode <- ape::read.nexus("C:/Users/Mar/Desktop/RTP_RPackage/RandomTaPas-master/PfxCP_Data/Cparvum.tre")
strat = "parallel", cl = 4)
ATc <- max_cong(am_matrix, amphipod, trematode, n, N, method = "paco",
symmetric = TRUE, ei.correct = "sqrt.D",
percentile = 0.01, res.fq = TRUE,
strat = "parallel", cl = 4)
View(ATc)
am_matrix <- as.matrix(read.table("C:/Users/Mar/Desktop/RTP_RPackage/RandomTaPas-master/PfxCP_Data/PfxCP_assoc.txt", header = TRUE))
usethis::use_r("link_freq")
usethis::use_r("max_cong")
usethis::use_r("tangle_gram")
N = 1000
n = 8
ATc <- max_cong(am_matrix, amphipod, trematode, n, N, method = "paco",
symmetric = TRUE, ei.correct = "sqrt.D",
percentile = 0.01, res.fq = TRUE,
strat = "parallel", cl = 4)
View(ATc)
col = c("darkred","gray90", "darkblue")
tangle_gram(amphipod, trematode, am_matrix, ATc, colscale = "diverging",
colgrad = col, nbreaks = 50, node.tag = TRUE)
roxygen2::roxygenize()
devtools::check()
devtools::build()
devtools::check_rhub("~/Documents/R/library/RTaPas")
check_man()
build_manual()
build_manual("Rtapas")
build_manual(""~/Documents/R/library/RTaPas"")
build_manual("~/Documents/R/library/RTaPas")
build_manual("~/Documents/R/library/RTaPas", path = "~/Documents/R/library")
build_manual("~/Documents/R/library/RTaPas", path = "~/Documents/R/library")
tinytex::tlmgr_install("makeindex")
build_manual("~/Documents/R/library/RTaPas", path = "~/Documents/R/library")
build_manual("Rtapas", path = "~/Documents/R/library")
devtools::check(manual = TRUE)
library(devtools)
library(devtools)
library(roxygen2)
library(tidyverse)
devtools::check(manual = TRUE)
library(tools)
build_manual("Rtapas")
build_manual("~/Documents/R/library/RTaPas")
devtools::check(manual = TRUE)
build_manual("~/Documents/R/library/Rtapas_1.1.tar.gz")
library(Rtapas)
session_info()
remove.packages("Rtapas", lib="~/R/win-library/4.1")
install.packages("~/R/library/Rtapas_1.1.tar.gz", repos = NULL, type = "source")
sessionInfo()
session_info()
sessioninfo::package_info("Rtapas")
devtools::build_manual(" C:/Users/Mar/Documents/R/win-library/4.1", path = ".")
devtools::build_manual("C:/Users/Mar/Documents/R/win-library/4.1", path = ".")
devtools::build_manual("C:/Users/Mar/Documents/R/win-library/4.1/Rtapas", path = ".")
build_manual
devtools::build_manual
library(rcmdcheck)
library(callr)
rcmd("Rd2pdf")
usethis::use_r("linkf_CI")
#' # pp_treesPACo_incong <- prob_statistic(ths = THSi, np_matrix, NUC_500tr[1:5],
#' #                        CP_500tr[1:5], freqfun = "paco", NPi,
#' #                        symmetric = FALSE, ei.correct = "sqrt.D",
#' #                        percentile = 0.99, diff.fq = TRUE, res.fq = FALSE,
#' #                        below.p = FALSE, strat = "parallel", cl = 8)
#'
#' LFci <- linkf_CI (freqfun = "paco", x = pp_treesPACo_incong, fx = NPi,
#'                   c.level = 95, ylab = "Observed - Expected frequency")
#'
#'
linkf_CI <- function (freqfun = "paco", x, fx, c.level = 95, barplot = TRUE,
col.bar = "lightblue", col.ci = "darkblue", y.lim = NULL,
...) {
freqfun.choice <- c("geoD", "paco", "paraF")
if (freqfun %in% freqfun.choice == FALSE)
stop(writeLines("Invalid freqfun parameter.\r Correct choices are 'geoD',\n
'paco' or 'paraF'"))
if (freqfun == "geoD") {
GD01 <- x
LFGD01 <- fx
a <- 1 - (c.level/100)
GD.LO <- apply(GD01, 2, quantile, a/2)
GD.HI <- apply(GD01, 2, quantile, 1 - (a/2))
GD.AV <- apply(GD01, 2, mean)
df <- data.frame(LFGD01[, 1], LFGD01[, 2], LFGD01[, ncol(LFGD01)],
GD.LO, GD.HI, GD.AV)
colnames(df) <- c("Taxa1", "Taxa2", "GD.Fq",
"GD.LO", "GD.HI", "GD.AV")
if (barplot == TRUE) {
link.fq <- barplot(GD.AV, xaxt = "n", horiz = FALSE,
cex.names = 0.6, las = 2, cex.axis = 0.8,
ylim = y.lim, col = col.bar,
...)
suppressWarnings(arrows(link.fq, GD.HI, link.fq,
GD.LO, length = 0, angle = 90, code = 3, col = col.ci))
axis(side = 1, at = link.fq[1:length(GD.AV)], labels = LFGD01$HS,
las = 2, tick = FALSE, line = 0.1, cex.axis = 0.5)
return(df)
}
else {
return(df)
}
}
if (freqfun == "paco") {
PACO01 <- x
LFPACO01 <- fx
a <- 1 - (c.level/100)
PACO.LO <- apply(PACO01, 2, quantile, a/2)
PACO.HI <- apply(PACO01, 2, quantile, 1 - (a/2))
PACO.AV <- apply(PACO01, 2, mean)
df <- data.frame(LFPACO01[, 1], LFPACO01[, 2], LFPACO01[, ncol(LFPACO01)], PACO.LO, PACO.HI, PACO.AV)
colnames(df) <- c("Taxa1", "Taxa2", "PACO.Fq",
"PACO.LO", "PACO.HI", "PACO.AV")
if (is.null(y.lim)){
y.lim = c(min(PACO.LO), max(PACO.HI))
} else {
y <- y.lim
}
if (barplot == TRUE) {
link.fq <- barplot(PACO.AV, xaxt = "n", horiz = FALSE,
cex.names = 0.6, las = 2, cex.axis = 0.8,
ylim = y.lim, col = col.bar,
...)
suppressWarnings(arrows(link.fq, PACO.HI, link.fq,
PACO.LO, length = 0, angle = 90, code = 3, col = col.ci))
axis(side = 1, at = link.fq[1:length(PACO.AV)], labels = LFPACO01$HS,
las = 2, tick = FALSE, line = 0.1, cex.axis = 0.5)
return(df)
}
else {
return(df)
}
}
if (freqfun == "paraF") {
PF01 <- x
LFPF01 <- fx
a <- 1 - (c.level/100)
PF.LO <- apply(PF01, 2, quantile, a/2)
PF.HI <- apply(PF01, 2, quantile, 1 - (a/2))
PF.AV <- apply(PF01, 2, mean)
df <- data.frame(LFPF01[, 1], LFPF01[, 2], LFPF01[, ncol(LFPF01)],
PF.LO, PF.HI, PF.AV)
colnames(df) <- c("Taxa1", "Taxa2", "PF.Fq",
"PF.LO", "PF.HI", "PF.AV")
if (barplot == TRUE) {
link.fq <- barplot(PF.AV, xaxt = "n", horiz = FALSE,
cex.names = 0.6, las = 2, cex.axis = 0.8,
ylim = y.lim, col = col.bar,
...)
suppressWarnings(arrows(link.fq, PF.HI, link.fq,
PF.LO, length = 0, angle = 90, code = 3, col = col.ci))
axis(side = 1, at = link.fq[1:length(PF.AV)], labels = LFPF01$HS,
las = 2, tick = FALSE, line = 0.1, cex.axis = 0.5)
return(df)
}
else {
return(df)
}
}
}
usethis::use_r("gini_plot")
usethis::use_r("max_cong")
usethis::use_r("max_incong")
usethis::use_r("prob_statistic")
usethis::use_r("gini_plot")
usethis::use_r("gini_plot")
usethis::use_r("one2one_f")
usethis::use_r("max_cong")
usethis::use_r("max_incong")
usethis::use_r("tangle_gram")
library(phytool)
library(phytools)
usethis::use_r("assoc_mat")
usethis::use_r("one2one_f")
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
roxygen2::roxygenize()
devtools::build()
roxygen2::roxygenize()
devtools::build()
devtools::build()
library(devtools)
library(roxygen2)
library(tidyverse)
roxygen2::roxygenize()
devtools::check()
usethis::use_testthat()
library(devtools)
library(roxygen2)
library(tidyverse)
usethis::use_testthat()
roxygen2::roxygenize()
devtools::load_all()
devtools::load_all()
devtools::document()
roxygen2::roxygenize()
devtools::check()
devtools::build()
roxygen2::roxygenize()
devtools::build()
roxygen2::roxygenize()
devtools::build()
usethis::use_r("linkf_CI")
usethis::use_r("geo_D")
usethis::use_r("link_freq")
usethis::use_r("max_cong")
usethis::use_r("max_incong")
usethis::use_r("one2one_f")
usethis::use_r("paco_ss")
usethis::use_r("paraF")
usethis::use_r("prob_statistic")
usethis::use_r("tangle_gram")
